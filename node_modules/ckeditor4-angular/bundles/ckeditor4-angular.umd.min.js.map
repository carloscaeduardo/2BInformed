{"version":3,"sources":["../../src/ckeditor/ckeditor.helpers.ts","../../src/ckeditor/ckeditor.component.ts","../../src/ckeditor/ckeditor.module.ts"],"names":["promise","CKEditorComponent","elementRef","ngZone","this","tagName","type","ready","EventEmitter","dataReady","change","dataChange","dragStart","dragEnd","drop","fileUploadResponse","fileUploadRequest","focus","paste","afterPaste","blur","_readOnly","_data","_destroyed","editorUrl","Object","defineProperty","prototype","data","instance","setData","getData","readOnly","isReadOnly","setReadOnly","ngAfterViewInit","editorURL","_this","length","Promise","reject","TypeError","window","resolve","CKEDITOR","scriptResolve","scriptReject","loadScript","err","undefined","then","runOutsideAngular","createEditor","bind","catch","console","error","ngOnDestroy","destroy","writeValue","value","registerOnChange","callback","onChange","registerOnTouched","onTouched","element","document","createElement","nativeElement","appendChild","inline","config","replace","once","evt","subscribe","undo","undoManager","lock","fire","unlock","run","emit","editor","on","propagateChange","event","newData","name","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","NgModule","imports","FormsModule","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport loadScript from 'load-script';\n\ndeclare let CKEDITOR: any;\nlet promise;\n\nexport function getEditorNamespace( editorURL: string ): Promise<{ [ key: string ]: any; }> {\n\tif ( editorURL.length < 1 ) {\n\t\treturn Promise.reject( new TypeError( 'CKEditor URL must be a non-empty string.' ) );\n\t}\n\n\tif ( 'CKEDITOR' in window ) {\n\t\treturn Promise.resolve( CKEDITOR );\n\t} else if ( !promise ) {\n\t\tpromise = new Promise( ( scriptResolve, scriptReject ) => {\n\t\t\tloadScript( editorURL, err => {\n\t\t\t\tif ( err ) {\n\t\t\t\t\tscriptReject( err );\n\t\t\t\t} else {\n\t\t\t\t\tscriptResolve( CKEDITOR );\n\t\t\t\t}\n\n\t\t\t\tpromise = undefined;\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn promise;\n}\n","/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport {\n\tComponent,\n\tNgZone,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tforwardRef,\n\tElementRef,\n\tAfterViewInit, OnDestroy\n} from '@angular/core';\n\nimport {\n\tControlValueAccessor,\n\tNG_VALUE_ACCESSOR\n} from '@angular/forms';\n\nimport { getEditorNamespace } from './ckeditor.helpers';\n\nimport { CKEditor4 } from './ckeditor';\n\ndeclare let CKEDITOR: any;\n\n@Component( {\n\tselector: 'ckeditor',\n\ttemplate: '<ng-template></ng-template>',\n\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef( () => CKEditorComponent ),\n\t\t\tmulti: true,\n\t\t}\n\t]\n} )\nexport class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n\t/**\n\t * The configuration of the editor.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.html\n\t * to learn more.\n\t */\n\t@Input() config?: CKEditor4.Config;\n\n\t/**\n\t * Tag name of the editor component.\n\t *\n\t * The default tag is `textarea`.\n\t */\n\t@Input() tagName = 'textarea';\n\n\t/**\n\t * The type of the editor interface.\n\t *\n\t * By default editor interface will be initialized as `classic` editor.\n\t * You can also choose to create an editor with `inline` interface type instead.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n\t * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\n\t * to learn more.\n\t */\n\t@Input() type: CKEditor4.EditorType = CKEditor4.EditorType.CLASSIC;\n\n\t/**\n\t * Keeps track of the editor's data.\n\t *\n\t * It's also decorated as an input which is useful when not using the ngModel.\n\t *\n\t * See https://angular.io/api/forms/NgModel to learn more.\n\t */\n\t@Input() set data( data: string ) {\n\t\tif ( data === this._data ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.instance ) {\n\t\t\tthis.instance.setData( data );\n\t\t\t// Data may be changed by ACF.\n\t\t\tthis._data = this.instance.getData();\n\t\t\treturn;\n\t\t}\n\n\t\tthis._data = data;\n\t}\n\n\tget data(): string {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * When set to `true`, the editor becomes read-only.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\n\t * to learn more.\n\t */\n\t@Input() set readOnly( isReadOnly: boolean ) {\n\t\tif ( this.instance ) {\n\t\t\tthis.instance.setReadOnly( isReadOnly );\n\t\t\treturn;\n\t\t}\n\n\t\t// Delay setting read-only state until editor initialization.\n\t\tthis._readOnly = isReadOnly;\n\t}\n\n\tget readOnly(): boolean {\n\t\tif ( this.instance ) {\n\t\t\treturn this.instance.readOnly;\n\t\t}\n\n\t\treturn this._readOnly;\n\t}\n\n\t/**\n\t * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\n\t * event.\n\t */\n\t@Output() ready = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the editor data is loaded, e.g. after calling setData()\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\n\t * editor's method. It corresponds with the `editor#dataReady`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\n\t */\n\t@Output() dataReady = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the content of the editor has changed. It corresponds with the `editor#change`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\n\t * event. For performance reasons this event may be called even when data didn't really changed.\n\t * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\n\t * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\n\t */\n\t@Output() change = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the content of the editor has changed. In contrast to `change` - only emits when\n\t * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\n\t *\n\t * See more: https://angular.io/guide/template-syntax#two-way-binding---\n\t */\n\t@Output() dataChange = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the native dragStart event occurs. It corresponds with the `editor#dragstart`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragstart\n\t * event.\n\t */\n\t@Output() dragStart = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the native dragEnd event occurs. It corresponds with the `editor#dragend`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragend\n\t * event.\n\t */\n\t@Output() dragEnd = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the native drop event occurs. It corresponds with the `editor#drop`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-drop\n\t * event.\n\t */\n\t@Output() drop = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the file loader response is received. It corresponds with the `editor#fileUploadResponse`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadResponse\n\t * event.\n\t */\n\t@Output() fileUploadResponse = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the file loader should send XHR. It corresponds with the `editor#fileUploadRequest`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadRequest\n\t * event.\n\t */\n\t@Output() fileUploadRequest = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the editing area of the editor is focused. It corresponds with the `editor#focus`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\n\t * event.\n\t */\n\t@Output() focus = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires after the user initiated a paste action, but before the data is inserted.\n\t * It corresponds with the `editor#paste`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-paste\n\t * event.\n\t */\n\t@Output() paste = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires after the `paste` event if content was modified. It corresponds with the `editor#afterPaste`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-afterPaste\n\t * event.\n\t */\n\t@Output() afterPaste = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\n\t * event.\n\t */\n\t@Output() blur = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * The instance of the editor created by this component.\n\t */\n\tinstance: any;\n\n\t/**\n\t * If the component is read–only before the editor instance is created, it remembers that state,\n\t * so the editor can become read–only once it is ready.\n\t */\n\tprivate _readOnly: boolean = null;\n\n\t/**\n\t * A callback executed when the content of the editor changes. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tonChange?: ( data: string ) => void;\n\n\t/**\n\t * A callback executed when the editor has been blurred. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tonTouched?: () => void;\n\n\tprivate _data: string = null;\n\n\tprivate _destroyed: boolean = false;\n\n\t/**\n\t * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\n\t *\n\t * Defaults to 'https://cdn.ckeditor.com/4.16.0/standard-all/ckeditor.js'\n\t */\n\t@Input() editorUrl = 'https://cdn.ckeditor.com/4.16.0/standard-all/ckeditor.js';\n\n\tconstructor( private elementRef: ElementRef, private ngZone: NgZone ) {\n\t}\n\n\tngAfterViewInit(): void {\n\t\tgetEditorNamespace( this.editorUrl ).then( () => {\n\t\t\t// Check if component instance was destroyed before `ngAfterViewInit` call (#110).\n\t\t\t// Here, `this.instance` is still not initialized and so additional flag is needed.\n\t\t\tif ( this._destroyed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.ngZone.runOutsideAngular( this.createEditor.bind( this ) );\n\t\t} ).catch( window.console.error );\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis._destroyed = true;\n\n\t\tthis.ngZone.runOutsideAngular( () => {\n\t\t\tif ( this.instance ) {\n\t\t\t\tthis.instance.destroy();\n\t\t\t\tthis.instance = null;\n\t\t\t}\n\t\t} );\n\t}\n\n\twriteValue( value: string ): void {\n\t\tthis.data = value;\n\t}\n\n\tregisterOnChange( callback: ( data: string ) => void ): void {\n\t\tthis.onChange = callback;\n\t}\n\n\tregisterOnTouched( callback: () => void ): void {\n\t\tthis.onTouched = callback;\n\t}\n\n\tprivate createEditor(): void {\n\t\tconst element = document.createElement( this.tagName );\n\t\tthis.elementRef.nativeElement.appendChild( element );\n\n\t\tconst instance: CKEditor4.Editor = this.type === CKEditor4.EditorType.INLINE\n\t\t\t? CKEDITOR.inline( element, this.config )\n\t\t\t: CKEDITOR.replace( element, this.config );\n\n\t\tinstance.once( 'instanceReady', evt => {\n\t\t\tthis.instance = instance;\n\n\t\t\t// Read only state may change during instance initialization.\n\t\t\tthis.readOnly = this._readOnly !== null ? this._readOnly : this.instance.readOnly;\n\n\t\t\tthis.subscribe( this.instance );\n\n\t\t\tconst undo = instance.undoManager;\n\n\t\t\tif ( this.data !== null ) {\n\t\t\t\tundo && undo.lock();\n\n\t\t\t\tinstance.setData( this.data, { callback: () => {\n\t\t\t\t\t// Locking undoManager prevents 'change' event.\n\t\t\t\t\t// Trigger it manually to updated bound data.\n\t\t\t\t\tif ( this.data !== instance.getData() ) {\n\t\t\t\t\t\tundo ? instance.fire( 'change' ) : instance.fire( 'dataReady' );\n\t\t\t\t\t}\n\t\t\t\t\tundo && undo.unlock();\n\n\t\t\t\t\tthis.ngZone.run( () => {\n\t\t\t\t\t\tthis.ready.emit( evt );\n\t\t\t\t\t} );\n\t\t\t\t} } );\n\t\t\t} else {\n\t\t\t\tthis.ngZone.run( () => {\n\t\t\t\t\tthis.ready.emit( evt );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\tprivate subscribe( editor: any ): void {\n\t\teditor.on( 'focus', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.focus.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'paste', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.paste.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'afterPaste', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.afterPaste.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'dragend', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.dragEnd.emit( evt );\n\t\t\t} );\n\t\t});\n\n\t\teditor.on( 'dragstart', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.dragStart.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'drop', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.drop.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'fileUploadRequest', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.fileUploadRequest.emit(evt);\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'fileUploadResponse', evt => {\n\t\t\tthis.ngZone.run(() => {\n\t\t\t\tthis.fileUploadResponse.emit(evt);\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'blur', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.onTouched ) {\n\t\t\t\t\tthis.onTouched();\n\t\t\t\t}\n\n\t\t\t\tthis.blur.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'dataReady', this.propagateChange, this );\n\n\t\tif ( this.instance.undoManager ) {\n\t\t\teditor.on( 'change', this.propagateChange, this );\n\t\t}\n\t\t// If 'undo' plugin is not loaded, listen to 'selectionCheck' event instead. (#54).\n\t\telse {\n\t\t\teditor.on( 'selectionCheck', this.propagateChange, this );\n\t\t}\n\t}\n\n\tprivate propagateChange( event: any ): void {\n\t\tthis.ngZone.run( () => {\n\t\t\tconst newData = this.instance.getData();\n\n\t\t\tif ( event.name === 'change' ) {\n\t\t\t\tthis.change.emit( event );\n\t\t\t} else if ( event.name === 'dataReady' ) {\n\t\t\t\tthis.dataReady.emit( event );\n\t\t\t}\n\n\t\t\tif ( newData === this.data ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._data = newData;\n\t\t\tthis.dataChange.emit( newData );\n\n\t\t\tif ( this.onChange ) {\n\t\t\t\tthis.onChange( newData );\n\t\t\t}\n\t\t} );\n\t}\n\n}\n","/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CKEditorComponent } from './ckeditor.component';\n\n@NgModule( {\n\timports: [ FormsModule, CommonModule ],\n\tdeclarations: [ CKEditorComponent ],\n\texports: [ CKEditorComponent ]\n} )\nexport class CKEditorModule {\n}\nexport * from './ckeditor';\nexport { CKEditorComponent } from './ckeditor.component';\n"]}